/*
 * FILE: refreshController.js
 * AUTHOR: Vansitha Ratnayake [ID: 20468523]
 * UNIT: Capstone Computing Project 2 ISAD3001
 * PURPOSE: Handles the refresh token functionality required for session management.
 * REFERENCE: None
 * LAST MOD: 27/07/2023
 */

const jwt = require("jsonwebtoken");
const { getUserByRefreshToken } = require("../data/Users");
require("dotenv").config();

/**
 * Handles the refresh of JWT access token for the client.
 *
 * @async
 * @param {Object} req - Details on incoming request from the client.
 * @param {Object} res - Object used to send the response to the client.
 * @returns {Promise<void>} - This function does not return a direct value,
 * but it handles token refresh and sends responses to the client.
 */
const handleRefreshToken = async (req, res) => {
  // Get access to JWT refresh token sent to the client in the cookie
  const cookies = req.cookies;
  if (!cookies?.jwt) return res.sendStatus(401);
  const refreshToken = cookies.jwt;

  // Get the user object associated with the provided refresh token from the database
  const userObj = await getUserByRefreshToken(refreshToken);

  // If no user object is found for the provided refresh token, return 403 Forbidden status
  if (!userObj) return res.sendStatus(403);

  // Verify whether the provided refresh token was generated by this server using the secret
  jwt.verify(refreshToken, process.env.REFRESH_TOKEN_SECRET, (err, decoded) => {
    if (err || userObj.email !== decoded.email) return res.sendStatus(403);

    // If the token is verified and belongs to the correct user, generate a new access token
    const role = userObj.role;
    const accessToken = jwt.sign(
      { userInfo: { uuid: userObj.uuid, email: userObj.email, role: role } },
      process.env.ACCESS_TOKEN_SECRET,
      { expiresIn: "30m" } // Change to 15 minutes for production
    );

    // Send the new access token to the client as a JSON response
    res.json({ accessToken, role });
  });
};

module.exports = { handleRefreshToken };
